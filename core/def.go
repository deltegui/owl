package core

import (
	"fmt"
	"time"

	"github.com/deltegui/valtruc"
)

const (
	Size64 int = 64
	Size32 int = 32
	Size16 int = 16
	Size8  int = 8
)

const (
	IntBase10 int = 10
)

const OneDayDuration time.Duration = 24 * time.Hour

// Hasher is anything that implements a hash algorithm.
// Normally a cryptographic hash to hash passwords (eg Bcrypt)
type Hasher interface {
	Hash(value string) (string, error)
	Check(a, b string) bool
}

// Cypher is anything that implements a symmetric encription
type Cypher interface {
	Encrypt(data []byte) ([]byte, error)
	Decrypt(data []byte) ([]byte, error)
}

// Role defines a user role
type Role int64

const (
	RoleAdmin Role = 1
	RoleUser  Role = 2
)

// ModelState represent the validation state of a ViewModel.
// Normally you want to let owl to generate it via the
// context API:
//
//	func handler(ctx owl.Ctx) error {
//		var vm ViewModel
//		ctx.ParseForm(&vm)
//		ctx.Validate(vm)
//		if ctx.ModelState.Valid {
//			...
//		}
//	}
//
// The validate function fills the ModelState depending of the rules
// you define in the struct tags using the library 'valtruc'.
type ModelState struct {
	Valid  bool
	Errors map[string][]ValidationError
}

// ValidationError represents an infraction of validation rules defined
// in tags of a struct. Show 'ModelState'.
type ValidationError interface {
	Error() string
	Format(f string) string
	GetStructName() string
	GetFieldName() string
	GetFieldTypeName() string
	GetFieldValue() string
	GetIdentifier() valtruc.ValidatorIdentifier
}

type CustomValidationError struct {
	ErrorMessage  string
	StructName    string
	FieldName     string
	FieldTypeName string
	FieldValue    string
	Identifier    valtruc.ValidatorIdentifier
}

func (v CustomValidationError) Error() string                              { return v.ErrorMessage }
func (v CustomValidationError) Format(f string) string                     { return v.ErrorMessage }
func (v CustomValidationError) GetStructName() string                      { return v.StructName }
func (v CustomValidationError) GetFieldName() string                       { return v.FieldName }
func (v CustomValidationError) GetFieldTypeName() string                   { return v.FieldTypeName }
func (v CustomValidationError) GetFieldValue() string                      { return v.FieldValue }
func (v CustomValidationError) GetIdentifier() valtruc.ValidatorIdentifier { return v.Identifier }

// DomainError models an error generated by business logic layer of your
// application
type DomainError struct {
	Code    int
	Message string
	wrapped error
}

func (err DomainError) Wrap(other error) DomainError {
	return DomainError{
		Code:    err.Code,
		Message: err.Message,
		wrapped: other,
	}
}

func (err DomainError) Wrapf(format string, a ...any) DomainError {
	error := fmt.Errorf(format, a...)
	return DomainError{
		Code:    err.Code,
		Message: err.Message,
		wrapped: error,
	}
}

func (err DomainError) Error() string {
	if err.wrapped != nil {
		return fmt.Sprintf("%s: %s", err.Message, err.wrapped.Error())
	}
	return err.Message
}

func (err DomainError) IsPresent() bool {
	return err.Code != 0
}
